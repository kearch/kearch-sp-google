/*
 * kearch specialist search engine gateway API
 *
 * kearch specialist search engine gateway API
 *
 * API version: 0.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"bufio"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
)

const hostname = "localhost"

// AddAConnectionRequestPost - Add a connection request sent from meta server to specialist server.
func AddAConnectionRequestPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	decoder := json.NewDecoder(r.Body)

	var data ConnectionRequestOnSp
	err := decoder.Decode(&data)
	if err != nil {
		panic(err)
	}

	me_host := data.MeHost
	scheme := data.Scheme
	log.Printf("me_host = " + me_host + ", scheme = " + scheme)

	res := InlineResponse200{MeHost: me_host}
	out, err := json.Marshal(&res)
	if err != nil {
		panic(err)
	}
	fmt.Fprint(w, string(out))
}

// DeleteAConnectionRequestDelete - Delete a connection request sent from meta server to specialist server.
func DeleteAConnectionRequestDelete(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	me_host := r.URL.Query().Get("me_host")
	log.Printf("me_host = " + me_host)

	res := InlineResponse200{MeHost: me_host}
	out, err := json.Marshal(&res)
	if err != nil {
		panic(err)
	}
	fmt.Fprint(w, string(out))
}

// GetASummaryGet - Get summary of this specialist server.
func GetASummaryGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	file, err := os.Open("en_default_dict.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	res := Summary{SpHost: hostname, EngineName: "kearch-sp-google", Dump: make(map[string]int32)}
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		sep := strings.Fields(line)
		n, err := strconv.Atoi(sep[1])
		if err != nil {
			log.Fatal(err)
		}
		res.Dump[sep[0]] = int32(n)
	}
	out, err := json.Marshal(&res)
	if err != nil {
		panic(err)
	}
	fmt.Fprint(w, string(out))
}

// RetrieveGet - Retrieve search results.
func RetrieveGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	query := r.URL.Query().Get("queries")
	max_urls, err := strconv.Atoi(r.URL.Query().Get("max_urls"))
	if err != nil {
		panic(err)
	}

	log.Printf("query = " + query + ", max_urls = " + strconv.Itoa(max_urls))
}
